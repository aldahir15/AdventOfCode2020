#..#.#...##.#.............#.............#.#..........#.....#....#..#.##..........#.#............
.#...............##..#..#.##.........#...........#....#.##...............#.#.#.......#..###.....
..#..##..#.......#.#.....#......###...#.......##...###..##.#..#..##.#..#.##........#..#....#....
#..#...#..#..#..#..#..#............#.....#..#....####....##..#.##..###.....#.....#.......#.....#
.#..###..####..#.###...##.......#....#..#..#.#.#...#..##....#...#......#.........#.....#........
....##.#..#.....#.#.##.....#..............#.......#..#....#..#...###....#...#.#.#.###...#.......
....#.............#...##.#............#.....#........#...................##...#..#..#..##.#..#.#
....#...#......#....#...#.#..##.#...#......#.........##...#.....#..##...#..###....##...###..#.#.
.........###...#.........##.##.#......##.......#.#...#..#.##.#.#.#...##..#..#.##...#.......#.##.
...#....#....###..#..................#......##.####..#..##.#.....#...............#....#....##...


#..#.#.#.# #.#.#..#.##.#.#...#####.##......###.#.###...#.#....#.###.####.....#####......#.#####..#....#..####...#.##.####,
#......... .....#.#..............##.#..###....#.......#............#.#.................#..##........##...#.##.....#.#..##,
#.....###. ...#.....##..#.#.#.##................##...#....#...............#...........##.###..#..##.##................#.#,
#....#...# #.#..#...##.....##...#..#.##....#..#.####..###...####.........#...#####......#.......#.#.........#....##..#..#,
##.....#.. .......#.......#...##..###..#..#.#..##......####......#..#.##....#.............##.#..#..#....#..#....#...#..#.,
#........# ##.....#.##..........#......###...#......##..#.....#.#.#..#....#....#.........####...###.###..####.##.###..#.#,
........## #...###.###.#.#...###....###.##..#..#......#..#.........#..................#...##..##.#.###.....#..###.##.....,
##.#..#.#. .#..#..#....#...##...........##............#..........#....##.#..............#.####...#.................#.....,
#.#.#..##. .#...##......###..###...##..#.......#.....##.....##....#...##...#...###.##..#.#.....#....###......#.....#....#,
..#.##...# #...###.######.###.##.####.....#######.##...#.##.###....#####..#.#.#####.##....##..#.#.##..#.########.##.#.#.#,
..#.##...# #...###.######.###.##.####.....#######.##...#.##.###....#####..#.#.#####.##....##..#.#.##..#.########.##.#.#.#,
#.##.#.... .....#...####.#..#.##.##...#...#.#.##.###..#...#.###.......####......###.##.##.##........###...###.##.........,
#...##.... ..#....#.##........##......#.......#.####..#..######.##....##..#...............##.....#....###....###....#...#,
...##..... ....#.#.....................###.#.#......##....####..#.####....#...#.##..#.##.###....#...##.......###..#.....#,
........## ##.......##..#..........#...###............#.....##.#...#..###.#..#........#.........#.....#.....##...#..#....,
#........# #...#..####....#........#.##........#.....#............#........#..........#......#......##...#...###.........,
####.....# ##.##.#..##.....#............##.....##.##.#...................#.#.............###...#.............#..#.....#.#,
..##..#.#......##..###.......##..##.#....#....#..##..#..#..###.......##....##....#.......###..#..####.....##...#.....#..,
.....#......#...#............##....#..###...#...........#.###..#..#....##.#..#.####........#.......##.......#....#.#.#..,
....#######....#.##...#..##......#..##...####.......#####.#..#..#.##.##.##.###.##.####.##..##..###.####.###.....##.#.#.#,
....#######....#.##...#..##......#..##...####.......#####.#..#..#.##.##.##.###.##.####.##..##..###.####.###.....##.#.#.#,
##..#...#........................###..................#.##...#####...##.##.##.#..###....###......#.....#.#..........#.##,
#..#...#.....#..........#.......#......####.#.#..##..............#...##..........#...#.#.....#....###.#..#..#.........#.,
.#.....#.##.#......##.#.....#..#..##.#.##........##..........#.............###...##..#..#..###...##..#.....#.##...#.##..,
#...#....##........##.##...#...#..#.#...............#......##........####....#.........#.##.#............#..............,
......#..###.......##........###...#......#...#.#........####........##.#.....#.........###...#....##.#...........#....#,
.#...#.#...........##....##........#.#...#....#.....#................##......##....##..##........#.##.#......##.##.....#,
.......##....#...#.####...######...#.#.......#...###.#....#........#.##......#...#..#.##.####..#..###.....#......#.#..##,
#....#..###.....#.###.....##....#.........#...#.........#.###.#....#.##.#.....###....##....#.##.#.######....#####.#..##.,
##.####......#..#.###.##...##...#.#.#....#.#....###....#.....#..#######.#..###.##.#.###.###...#####..#...####...###.#...,
##.####......#..#.###.##...##...#.#.#....#.#....###....#.....#..#######.#..###.##.#.###.###...#####..#...####...###.#...,
#......#.###......###......#...........##...##............###.##...####...##........#.##.##....###...###.#.##..#....##..,
..#.#....##.......#..........##........##.....#.....##.##.###..###...##....#............###........##...##.............#,
#..#..#..###..#..####.#..#.....#...#...####......##...#........##......#...#.#.##.#.#......#....#....#.......##..#.#....,
#.#....####....##..##..###...##...#.#............##.......#......#...###......###........##....##.....#.................,
#.......#......#.##..#..#...###.................###.....##......#....####...#..##.....#....#..#..##...#..#..#.....#....#,
#.....#..##.#....#...........##....#.#.##..#..#......#............#..###.#...#.....#...####....##..###.###.#...###.....#,
#.##.#...##.....#..##...#..............##.#...#..##...#...........#.....#........#.......##.....#....#.#..#.....##.##..#,
##..#......#....#..##.#......##..#.....##.....#.###..#.....##...##..####..#....##..........#..#..#.##...###.....#.....##,
#..###.....#.#.########........#..##...##.##..###..#.##.##....#.#..#.###.##.#..###..#..####.....##.###.#####...#..#.#.##,
#..###.....#.#.########........#..##...##.##..###..#.##.##....#.#..#.###.##.#..###..#..####.....##.###.#####...#..#.#.##,
#........##.#..#.#.##...##.####....#...###..#.#................#..##.##.#.#.#.#..#.......##.#....#....#...#.#...........,
#...##.####......#.##..#........#.#..#.#####.#..#....#...#......#.#..........#.##...........##..#.......#..#.....#.....#,
............#.#....##......####..#....####....#####..#####.##.##.#.............##...#..#.##...#...###....#......#..#...#,
#..###.......#........##.....##.......#........#.##...##...###...#.........#.#.....#....####..#.#..##.#......##....#.#.#,
...............#...##..#............###.....#...#..............#.....##.....#............##..#..#.###.....#.............,
.........##..#..#.......#.#.#...#..........#.....##...#..#.##.#......###.......##.#...#.#......#...##.....#.......#...##,
.......#...#.#..#.....#......##.#.........##..#.#..#..##.#.####......##....#......#..............#......#....##..#......,
...#..........#....##.#.#....##..##...###.#....##......##.####.#####.##.#..#...##...##......#..#.####..####..###....##.#,
.#..#...#.......#.#..##...#######....#...#.#.##.####..###.....#.#####..#...#.####.#.#####..#######...#.....####.##.#####,
.#..#...#.......#.#..##...#######....#...#.#.##.####..###.....#.#####..#...#.####.#.#####..#######...#.....####.##.#####,
##..###...........#.......###........#....##.....##..##.......###..........#........##.....#....##......##...########..#,
#...#...###........##..#.....##.......###...........#...##.##........##..#..#..##....#..###..#.....###.....#.##..#..#.##,
....##............#...#..#.#.##...........#.#....##.....#......#.#.....#......#......#.....#.#..##.......#...###..#..#..,
.#..##...##...#..#.......#..###..#.##....#.###..#........#######...#........#.....#...##....#.........##.....##..##.....,
#.......#####......##.###..#######..###......###.##......##....#...............##.#.#....##...#.................#.###...,
#.#...#..##..##..............................##.###..#.....##........##...#..#.#######.......#..#..##...#....####......#,
.##....####..........#...................#..#.......##....###.....##.##..##..#.##....#...##.......#.......#####....#....,
.#...#..#.....#..##....#.##.###............#....#.....##.##.....#.#..###..#.#.###..#.##..###.....#...#.......##..##.....,
###...#.#######.#..####...#####.#.....###...###....###.....##.###.##...###....###...#...####.#.#.######.#####..###.#...#,
###...#.#######.#..####...#####.#.....###...###....###.....##.###.##...###....###...#...####.#.#.######.#####..###.#...#,
..#........#.......##......##..........##.....#..##................####........##.#....#...###.#.####..#..#..##.......#.,
#.#....#......##.#.##.##.#..###..#...#........#........#..###..........#....#.#####...#..###.##......##....##..#.......#,
##...#.#.##..#.#..#..##...##...##.###....#......###...#.#####.##....#..#...##..##...#.#.###......#..........#.......####,
.....#......###....##......#.####..#...####...#.#...##..#..##......#...#.##..#.....#.........#..#.#...#.#........##.#..#,
#.....#.###.#......##......#.###.#.#.....#..#....##......#...........##.#..#.#.##....#.##..#..#.#..##.....#.........#..#,
##.#.......#....#.#.............#..............#.......##.####..#..#.######......#..#.##....#.##..####......#..#.....#.#,
#...#..............##..............#..#..#.....####...##.#...#................###....##.###..##......###...#..........#.,
##.#..........#.............#...###..#....#....#.......................#....#......##..##.....#.#..##.#....#.#####.#..#.,
.#.#...##...##.######....#..######.####..#####......##.....##..####.#########..#####..#.####.##.########.#.######..##..#,
.#.#...##...##.######....#..######.####..#####......##.....##..####.#########..#####..#.####.##.########.#.######..##..#,
##...#.#.###......#......#...##......#......#..#......#....##......#...##..#.#......##...##..#.....##...##...........#..,
#......#.##.#..#..###.###.##....#......##...........#.#..#.#######...###.#...#.##........##....#...##..#.#.##..........#,
#.#...#.###..##...#..###...##..#.#....###.#.........#....#.###...##.####.......###.##..#......#.#.....###..#.##........#,
...........##.#.........###.#.....#...###.#......###..#..#.###.#.#.........##..###.......##...##...........#........#...,
.......#.....#.................#...#..#....#..#....#..#...###.#......##.#..#.#.###...#.........#.#.....#.........##..#..,
.....##..##.#....##....#...#.##...#......##..#.####....###.##.#.#........###.#.##.#..........#.#.#.......#.#.##.#.....#.,
#....#..........#..##........##........##...#....##..#..#..##...##...##.##........###...######.##....#..#....###......##,
#......##....##..#.##...#.......#....#.......#......#.#.#.#...#.#...###...#..#...#.#..#..###..#.##.####...#.#...#.....##,
..#..####..#.###..#..###.##..###...#.#...#.#..######.###..###.##.##......###..#..###...#.##.####.#.##.#.....#..#.#.....#,
..#..####..#.###..#..###.##..###...#.#...#.#..######.###..###.##.##......###..#..###...#.##.####.#.##.#.....#..#.#.....#,
......#..###.##.......#.#........##....##..#.......#...#...##..................##.#..######....###.....###...####..#....,
...........#.......###.........#.........#....#...............#.........#......##.....................###.#.#.....##....,
#.#.....###..##..####...#...####.#...##........#.....#....###.#....#.##.....#.......#..#.##.#..........##..#.##.#....#.#,
##..#..####........##...........#...........#.##........##.##.##.........##...#..........###.#....###...#..##..#......#.,
#.#..........##......#..##.#.##..##....####....####....#..#....##.#..##...##.#.##....#.##..#...#..#..........##.........,
#.#..#...##...#.##...#..#..#...##..#.....#.....##......#.....#....##.##.##.....###.......##.#.#...#...#........#........,
.......##......#.....####...#..###..###........#.........#.##.......###............#.....##..#.....##.#.....###......#..,
.....#.#....#..#.........##........#.#.##.............#.............#...#.#...###............#..........#........#......,
####.#######.....##....#.##..##..#...#.######.#.###.###...###.#####.###...##.####.##..#.#..#...##.#######....##..#.###..,
####.#######.....##....#.##..##..#...#.######.#.###.###...###.#####.###...##.####.##..#.#..#...##.#######....##..#.###..,
#.#.#..........#.....#......#...#.....#..#..#....##....#.....#......###.##..#....#..#..##....###......##...#.##........#,
.#....#..##...#...###..##....##.......#....##....##.....##.##......#......##...##.##....#..##...#....#...........#.#....,
#.#...........#....###.##..#...#...............#.##...#....##..#.....##......#.###...#..#..#...##.......#..........#.#.#,
#.#........###..##.###.#.#.#.....#.##.......#..#.##.#......###.......###.#.........................##..............#.##.,
..#...........#..........#...##.#.#.#.#...#....#................#...#.......#..##..##....##...#..#.###.#.....##...#..###,
#........##.#..###.##.##..#.####.#..#....#..#..#......#..##.....#....##.##...#...#..#..#....##.#..###.....#..##.#...#..#,
#..#.......#.#.....##......#...##.##...##.##.#..#####......##............##..##...#..##......##....#####.....##.........,
.......#.##...#.#.#........#.##........##.......####.......##...#......#....#..##..#..........#.#####.###....##........#,
##.#..#..#########..........#....#...#....##....###..##...###.##...#....#.###..####...#....###..#.#####....#.##..##..#..,
0
ARMSAKELEAF:Advent2020 jose.moreno$ 


  function dfs(key, seen, path, x, y, tempArr, dir, actualArr) {
    const matches = Object.keys(tileHash);
    // console.log(key, path.length);
    if (path.length === 144) {
      // console.log("Works", tempArr[0][0],
      //                     tempArr[0][tempArr.length -1],
      //                     tempArr[tempArr.length - 1][0],
      //                         tempArr[tempArr.length - 1][tempArr.length - 1]);
      // console.log("__________")
      finalArr = actualArr;
    }

    for (let i = 0; i < matches.length; i++) {
      const currMatch = matches[i];
      if (seen[currMatch]) continue;

      let newX;
      let newY;
      let newDir = dir;
      if (dir === "right") {
        if (y === 11) {
          newX = x + 1;
          newY = 11;
          newDir = "left"
        } else {
          newX = x;
          newY = y + 1;
        }
      } else if (dir === "left") {
        if (y === 0) {
          newX = x + 1;
          newY = 0;
          newDir = "right";
        } else {
          newX = x;
          newY = y - 1;
        }       
      }

      if (newX === 0 && newY === 11) {
        if (!borders.includes(currMatch)) continue;
      }

      // console.log(tempArr);
      // if (tempArr[newX - 1] && tempArr[newX - 1][newY]) {
      //   const tA = Object.keys(matchHash[tempArr[newX - 1][newY]]);
      //   // console.log("1")
      //   if (!tA.includes(currMatch)) continue;
      // }
      // if (tempArr[newX + 1] && tempArr[newX + 1][newY]) {
      //   const tA = Object.keys(matchHash[tempArr[newX + 1][newY]]);
      //   // console.log("1")
      //   if (!tA.includes(currMatch)) continue;
      // }
      // if (tempArr[newX][newY - 1]) {
      //   const tA = Object.keys(matchHash[tempArr[newX][newY - 1]]);
      //   // console.log("1")
      //   if (!tA.includes(currMatch)) continue;
      // }
      // if (tempArr[newX][newY + 1]) {
      //   const tA = Object.keys(matchHash[tempArr[newX][newY + 1]]);
      //   // console.log("1")
      //   if (!tA.includes(currMatch)) continue;
      // }


      seen[currMatch] = true;
      tmmp = tempArr.slice(0).map(x => x.slice());
      fulltmp = actualArr.slice(0).map(x => x.slice());
      // let matchingS = matchHash[key][currMatch];
      let matchingS;
      if (newDir === "right") {
        matchingS = getBorder(fulltmp[x][y], "right");
      } else {
        matchingS = getBorder(fulltmp[x][y], "left");
      }
      console.log(matchingS, "matchingS", key, path.length)

      //
      if (x != newX) {
        matchingS = getBorder(fulltmp[x][y], "bottom")

        // console.log(matchingS);
        const res = faceDir(currMatch, matchingS, "top");
        fulltmp[newX][newY] = res ? res.slice(0) : null;
        if (!fulltmp[newX][newY]) continue;
        if (fulltmp[x][y][9] != fulltmp[newX][newY][0]) {
          console.log("TOP")
          console.log(fulltmp[x][y])
          console.log(fulltmp[newX][newY])
        }
      } else {
        if (newDir === "right") {
          // if (x === 0 && y === 0) fulltmp[x][y] = faceDir(key, matchingS, "right");
          const res = faceDir(currMatch, matchingS, "left");
          fulltmp[newX][newY] = res ? res.slice() : null;
        } else {
          // if (x === 0 && y === 0) fulltmp[x][y] = faceDir(key, matchingS, "left");
          const res = faceDir(currMatch, matchingS, "right");
          fulltmp[newX][newY] = res ? res.slice() : null;
        }
        if (!fulltmp[newX][newY]) continue;
      }


      // if (fulltmp[x][y] === undefined) console.log(tileHash[key], matchingS);
      // if (fulltmp[newX][newY] === undefined) console.log(tileHash[currMatch], matchingS);
      // console.log(fulltmp[x][y])
      // console.log(fulltmp[newX][newY])
      // console.log("______________")
      // console.log(fulltmp);


      tmmp[newX][newY] = currMatch;
      dfs(currMatch, seen, path.concat(currMatch), newX, newY, tmmp, newDir, fulltmp);
      seen[currMatch] = false;
    }
  }

  function faceDir(key, borderS, dir) {
    const val = tileHash[key];
    const mirrorV = tileHash[key].map(x => x.split("").slice().reverse().join(""))
    const reverseV = tileHash[key].slice().reverse();

    // console.log(moveClockWise(mirrorV, 3))
    if (facing(val, borderS, "left") && dir === "top") {
      console.log("VAL LEFT")
      return moveClockWise(val.slice(0).reverse(),1 )
    } else if (facing(val, borderS, "right") && dir === "top") {
      console.log("VAL RIGHT")
      return moveClockWise(val, 3) 
    } else if (facing(val, borderS, "top") && dir === "top") {
      console.log("VAL TOP")
      return val
    } else if (facing(val, borderS, "bottom") && dir === "top") {
      console.log("VAL BOTTOM")
      return val.slice().reverse() 
    }

    if (facing(mirrorV, borderS, "left") && dir === "top") {
      console.log("MIRROR LEFT")
      return moveClockWise(mirrorV.slice(0).reverse(),1 )
    } else if (facing(mirrorV, borderS, "right") && dir === "top") {
      console.log("MIRROR RIGHT")
      return moveClockWise(mirrorV, 3) 
    } else if (facing(mirrorV, borderS, "top") && dir === "top") {
      console.log("MIRROR TOP")
      return mirrorV
    } else if (facing(mirrorV, borderS, "bottom") && dir === "top") {
      console.log("MIRROR BOTTOM");
      return mirrorV.slice().reverse();
    }

    if (facing(reverseV, borderS, "left") && dir === "top") {
      console.log("REVERSE LEFT")
      return moveClockWise(reverseV.slice().reverse(),1 )
    } else if (facing(reverseV, borderS, "right") && dir === "top") {
      console.log("REVERSE RIGHT")
      return moveClockWise(reverseV, 3)  
    } else if (facing(reverseV, borderS, "top") && dir === "top") {
      console.log("REVERSE TOP")
      return mirrorV 
    } else if (facing(reverseV, borderS, "bottom") && dir === "top") {
      console.log("REVERSE BOTTOM")
      return reverseV.slice().reverse()
    }

    // TRY ABOVE


    if (facing(val, borderS, "left")) return dir === "right" ? val.map(x => x.split("").reverse().join("")) : val
    else if (facing(val, borderS, "right")) return dir === "right" ? val : val.map(x => x.split("").reverse().join(""))
    else if (facing(val, borderS, "top")) return dir === "right" ? moveClockWise(val, 1) :   moveClockWise(val, 3)
    else if (facing(val, borderS, "bottom")) return dir === "right" ? moveClockWise(val, 3) :   moveClockWise(val, 1)

    if (facing(mirrorV, borderS, "left")) return dir === "right" ? mirrorV.map(x => x.split("").reverse().join("")) : mirrorV
    else if (facing(mirrorV, borderS, "right")) return dir === "right" ? mirrorV : mirrorV.map(x => x.split("").reverse().join(""))
    else if (facing(mirrorV, borderS, "top")) return dir === "right" ? moveClockWise(mirrorV, 1) :   moveClockWise(mirrorV, 3)
    else if (facing(mirrorV, borderS, "bottom")) return dir === "right" ? moveClockWise(mirrorV, 3) :   moveClockWise(mirrorV, 1)

    if (facing(reverseV, borderS, "left")) return dir === "right" ? reverseV.map(x => x.split("").reverse().join("")) : reverseV
    else if (facing(reverseV, borderS, "right")) return dir === "right" ? reverseV : reverseV.map(x => x.split("").reverse().join(""))
    else if (facing(reverseV, borderS, "top")) return dir === "right" ? moveClockWise(reverseV, 1) :   moveClockWise(reverseV, 3)
    else if (facing(reverseV, borderS, "bottom")) return dir === "right" ? moveClockWise(reverseV, 3) :   moveClockWise(reverseV, 1)
  }

  function moveClockWise(matrix, count) {
    matrix = matrix.map(x => x.split(""))
    let i = 0;
    while (i < count) {
      matrix = matrix[0].map((val, index) => matrix.map(row => row[index]).reverse())
      i += 1;
    }

    // console.log(matrix.map(x => x.join("")))
    return matrix.map(x => x.join(""));
  }

  function facing(val, borderS, direction) {
    if (direction === "left") {
      let tempS = "";

      for (let i = 0; i < val.length; i++) {
        tempS += val[i][0];
      }
      return tempS === borderS;
    } else if (direction === "right") {
      let tempS = "";

      for (let i = 0; i < val.length; i++) {
        tempS += val[i][val[i].length - 1];
      }
      return tempS === borderS;
    } else if (direction === "top") {
      let tempS = "";

      for (let i = 0; i < val[0].length; i++) {
        tempS += val[0][i];
      }
      // console.log(tempS)
      return tempS === borderS;
    } else if (direction === "bottom") {
      let tempS = "";

      for (let i = 0; i < val[0].length; i++) {
        tempS += val[val.length - 1][i];
      }
      return tempS === borderS;
    }
  }

  //start to get full pic
  let fullArr = new Array(12).fill(new Array(12).fill(null).slice()).map(x => x.slice())
  fullArr[0][0] = borders[0];
  let actualArr = fullArr.slice(0).map(x => x.slice(0));
  // console.log(actualArr)
  const firstTile = tileHash[actualArr[0][0]];
  if (finalArr.length === 0) {
    actualArr[0][0] = firstTile;
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = moveClockWise(firstTile,1);
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = moveClockWise(firstTile,2);
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = moveClockWise(firstTile,3);
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = firstTile.slice().reverse();
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = moveClockWise(firstTile.slice().reverse(),1);
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = moveClockWise(firstTile.slice().reverse(),2);
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }
  if (finalArr.length === 0) {
    actualArr[0][0] = moveClockWise(firstTile.slice().reverse(),3);
    dfs(borders[0], {[borders[0]]: true}, [borders[0]],0,0,fullArr, "right", actualArr.slice().map(x => x.slice()));
  }